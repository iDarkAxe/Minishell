.TH "src/garbage/garbage_stack.c" 3 "Minishell" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/garbage/garbage_stack.c
.SH SYNOPSIS
.br
.PP
\fR#include 'garbage\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBt_element\fP * \fBft_garbagenew\fP (void *ptr)"
.br
.RI "Allocates and returns the newly created element 'value' is initialised with content 'next' is set to NULL\&. "
.ti -1c
.RI "void \fBft_garbageadd_front\fP (\fBt_garbage\fP *garbage, \fBt_element\fP *new)"
.br
.RI "Adds the 'new' element at the start of stack\&. "
.ti -1c
.RI "void \fBft_garbageadd_back\fP (\fBt_garbage\fP *garbage, \fBt_element\fP *new)"
.br
.RI "Adds the 'new' element at the end of stack\&. "
.ti -1c
.RI "void \fBft_garbage_free_element\fP (\fBt_element\fP *element)"
.br
.ti -1c
.RI "int \fBft_garbageclear\fP (\fBt_garbage\fP *garbage)"
.br
.RI "Remove all elements from garbage\&. "
.in -1c
.SH "Function Documentation"
.PP 
.SS "void ft_garbage_free_element (\fBt_element\fP * element)\fR [inline]\fP"

.SS "void ft_garbageadd_back (\fBt_garbage\fP * garbage, \fBt_element\fP * new)"

.PP
Adds the 'new' element at the end of stack\&. 
.PP
\fBParameters\fP
.RS 4
\fIgarbage\fP garbage structure 
.br
\fInew\fP element to add 
.RE
.PP

.SS "void ft_garbageadd_front (\fBt_garbage\fP * garbage, \fBt_element\fP * new)"

.PP
Adds the 'new' element at the start of stack\&. 
.PP
\fBParameters\fP
.RS 4
\fIgarbage\fP garbage structure 
.br
\fInew\fP element to add 
.RE
.PP

.SS "int ft_garbageclear (\fBt_garbage\fP * garbage)"

.PP
Remove all elements from garbage\&. 
.PP
\fBParameters\fP
.RS 4
\fIgarbage\fP garbage structure 
.RE
.PP
\fBReturns\fP
.RS 4
int 0 OK, -1 is error 
.RE
.PP

.SS "\fBt_element\fP * ft_garbagenew (void * ptr)"

.PP
Allocates and returns the newly created element 'value' is initialised with content 'next' is set to NULL\&. 
.PP
\fBParameters\fP
.RS 4
\fIptr\fP pointer to add in the element 
.RE
.PP
\fBReturns\fP
.RS 4
t_element* pointer to the element 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Minishell from the source code\&.
