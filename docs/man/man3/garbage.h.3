.TH "inc/garbage.h" 3 "Minishell" \" -*- nroff -*-
.ad l
.nh
.SH NAME
inc/garbage.h
.SH SYNOPSIS
.br
.PP
\fR#include <stdlib\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBs_element\fP"
.br
.RI "Basic node for an element of a linked list\&. "
.ti -1c
.RI "struct \fBs_garbage\fP"
.br
.RI "Head of the linked list\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void * \fBmalloc_gb\fP (\fBt_garbage\fP *garbage, size_t size)"
.br
.RI "Replace the original malloc by storing the created adresses into a garbage to remove them afterwards\&. "
.ti -1c
.RI "void \fBadd_to_garbage\fP (\fBt_garbage\fP *garbage, void *ptr)"
.br
.RI "Add a pointer to the garbage list\&. "
.ti -1c
.RI "void \fBfree_element_gb\fP (\fBt_garbage\fP *garbage, void *ptr)"
.br
.RI "Free an element in the garbage collector\&. "
.ti -1c
.RI "char * \fBft_strdup_gb\fP (\fBt_garbage\fP *garbage, const char *source)"
.br
.RI "Create a copy of source into a new pointer NEEDS to be freed\&. "
.ti -1c
.RI "void \fBgarbage_init\fP (\fBt_garbage\fP *garbage)"
.br
.RI "Get the garbage object\&. "
.ti -1c
.RI "void \fBfree_garbage\fP (\fBt_garbage\fP *garbage)"
.br
.RI "Free the garbage\&. "
.ti -1c
.RI "void \fBprint_garbage\fP (\fBt_garbage\fP *garbage)"
.br
.RI "Print the garbage collector\&. "
.ti -1c
.RI "\fBt_element\fP * \fBft_garbagenew\fP (void *ptr)"
.br
.RI "Allocates and returns the newly created element 'value' is initialised with content 'next' is set to NULL\&. "
.ti -1c
.RI "void \fBft_garbageadd_front\fP (\fBt_garbage\fP *garbage, \fBt_element\fP *new)"
.br
.RI "Adds the 'new' element at the start of stack\&. "
.ti -1c
.RI "void \fBft_garbageadd_back\fP (\fBt_garbage\fP *stack, \fBt_element\fP *new) __attribute__((deprecated))"
.br
.RI "Adds the 'new' element at the end of stack\&. "
.ti -1c
.RI "int \fBft_garbageclear\fP (\fBt_garbage\fP *data)"
.br
.RI "Remove all elements from garbage\&. "
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for Minishell from the source code\&.
